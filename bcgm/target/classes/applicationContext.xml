<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
				http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd
				http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd">


	<!-- 自动扫描与装配bean，扫描web包，将带有注解的类纳入spring容器管理 -->
	<!-- <context:component-scan base-package="cn.itcast.oa">作用
	Spring容器初始化时，会扫描cn.itcast.oa目录下标有@Component；@Service；@Controller；@Repository
	注解的类纳入Spring容器管理
    在类上，使用以下注解，实现bean的声明：
	  @Component：泛指组件，当组件不好归类的时候，我们可以使用这个注解进行标注。
	  @Service 用于标注业务层组件
	  @Controller 用于标注控制层组件（如springMvc的controller，struts中的action）
	  @Repository用于标注数据访问组件，即DAO组件
			
    在类的成员变量上，使用以下注解，实现属性的自动装配
	  @Autowired ：按类的类型进行装配
	  @Resource：
  1.如果同时指定了name和type，那么从Spring上下文中找到唯一匹配的bean进行装配
  2. 如果指定了name，则从上下文中查找名称（id）匹配的bean进行装配，找不到则抛出异常 
  3.如果指定了type，则从上下文中找到类型匹配的唯一bean进行装配，找不到或者找到多个，都会抛出异常 
  4.如果既没有指定name，又没有指定type，则自动按照byName方式进行装配；如果没有匹配，则回退为一个原始类型进行匹配，如果匹配则自动装配；
	 -->
	<context:component-scan base-package="com.bcgm" />

	<!-- 加载外部的properties配置文件（引入jdbc的配置文件） -->
	<context:property-placeholder location="classpath:dbconfig.properties"/>


	<!-- 配置数据库连接池（c3p0）这个可以在hibernate.cfg.xml中配置 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
	
		<!-- 基本信息 ：jdbc的url、驱动名、数据库名字、密码--> 
		<property name="jdbcUrl" value="${jdbcurl}"></property>
		<property name="driverClass" value="${driver}"></property>
		<property name="user" value="${user}"></property>
		<property name="password" value="${password}"></property>
	</bean>
	<!-- 配置SessionFactory 
	（把数据源注入给session工厂）、配置映射文件将Spring与hibernate初步整合起来
	-->
	<bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
		<property name="mapperLocations" value="classpath:mapper/*.xml"></property>
	</bean>
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
	<property name="basePackage" value="com.bcgm.dao"></property>
	</bean>
	<!-- 配置声明式的事务管理（采用基于注解的方式） 
	session工厂注入到事务管理器transactionManager使Spring与Hinbernate整合实现业务逻辑
	-->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<tx:annotation-driven transaction-manager="transactionManager"/>
	
</beans>
